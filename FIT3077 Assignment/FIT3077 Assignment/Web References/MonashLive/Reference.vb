'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace MonashLive
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MelbourneWeather2Soap11Binding", [Namespace]:="http://MelbourneWeather2")>  _
    Partial Public Class MelbourneWeather2
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getRainfallOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTemperatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLocationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.FIT3077_Assignment.My.MySettings.Default.FIT3077_Assignment_Monash_MelbourneWeather2
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getRainfallCompleted As getRainfallCompletedEventHandler
        
        '''<remarks/>
        Public Event getTemperatureCompleted As getTemperatureCompletedEventHandler
        
        '''<remarks/>
        Public Event getLocationsCompleted As getLocationsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getRainfall", RequestNamespace:="http://MelbourneWeather2", ResponseNamespace:="http://MelbourneWeather2", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getRainfall(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal location As String) As <System.Xml.Serialization.XmlElementAttribute("return", IsNullable:=true)> String()
            Dim results() As Object = Me.Invoke("getRainfall", New Object() {location})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getRainfallAsync(ByVal location As String)
            Me.getRainfallAsync(location, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getRainfallAsync(ByVal location As String, ByVal userState As Object)
            If (Me.getRainfallOperationCompleted Is Nothing) Then
                Me.getRainfallOperationCompleted = AddressOf Me.OngetRainfallOperationCompleted
            End If
            Me.InvokeAsync("getRainfall", New Object() {location}, Me.getRainfallOperationCompleted, userState)
        End Sub
        
        Private Sub OngetRainfallOperationCompleted(ByVal arg As Object)
            If (Not (Me.getRainfallCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getRainfallCompleted(Me, New getRainfallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getTemperature", RequestNamespace:="http://MelbourneWeather2", ResponseNamespace:="http://MelbourneWeather2", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTemperature(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal location As String) As <System.Xml.Serialization.XmlElementAttribute("return", IsNullable:=true)> String()
            Dim results() As Object = Me.Invoke("getTemperature", New Object() {location})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTemperatureAsync(ByVal location As String)
            Me.getTemperatureAsync(location, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTemperatureAsync(ByVal location As String, ByVal userState As Object)
            If (Me.getTemperatureOperationCompleted Is Nothing) Then
                Me.getTemperatureOperationCompleted = AddressOf Me.OngetTemperatureOperationCompleted
            End If
            Me.InvokeAsync("getTemperature", New Object() {location}, Me.getTemperatureOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTemperatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTemperatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTemperatureCompleted(Me, New getTemperatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getLocations", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Bare)>  _
        Public Function getLocations() As <System.Xml.Serialization.XmlArrayAttribute("getLocationsResponse", [Namespace]:="http://MelbourneWeather2"), System.Xml.Serialization.XmlArrayItemAttribute("return")> String()
            Dim results() As Object = Me.Invoke("getLocations", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLocationsAsync()
            Me.getLocationsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLocationsAsync(ByVal userState As Object)
            If (Me.getLocationsOperationCompleted Is Nothing) Then
                Me.getLocationsOperationCompleted = AddressOf Me.OngetLocationsOperationCompleted
            End If
            Me.InvokeAsync("getLocations", New Object(-1) {}, Me.getLocationsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLocationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLocationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLocationsCompleted(Me, New getLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getRainfallCompletedEventHandler(ByVal sender As Object, ByVal e As getRainfallCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getRainfallCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getTemperatureCompletedEventHandler(ByVal sender As Object, ByVal e As getTemperatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTemperatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getLocationsCompletedEventHandler(ByVal sender As Object, ByVal e As getLocationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLocationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
End Namespace
